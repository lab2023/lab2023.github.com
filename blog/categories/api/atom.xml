<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | lab2023 - internet teknolojileri]]></title>
  <link href="http://lab2023.github.com/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://lab2023.github.com/"/>
  <updated>2013-02-24T13:26:13+02:00</updated>
  <id>http://lab2023.github.com/</id>
  <author>
    <name><![CDATA[lab2023]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby On Rails REST API'de Access Token Kullanarak Kullanıcı Doğrulama]]></title>
    <link href="http://lab2023.github.com/blog/2012/11/27/ruby-on-rails-rest-api-de-access-token-kullanarak-kullanici-dogrulama/"/>
    <updated>2012-11-27T17:23:00+02:00</updated>
    <id>http://lab2023.github.com/blog/2012/11/27/ruby-on-rails-rest-api-de-access-token-kullanarak-kullanici-dogrulama</id>
    <content type="html"><![CDATA[<p>Öncelikle;</p>

<ul>
<li><p><code>HTTPS</code> kullanın. Çünkü <code>HTTP</code> kullanıldığında  parametreler plain text olarak iletiliyor. <code>Http Request</code>' leri dinleyen birisi keylerinize çok rahat ulaşabilir.</p></li>
<li><p><code>access_token</code>' ları url den parametre olarak almak yerine <code>Http Header</code>' dan almak daha uygundur. Çünkü kullanıcı alışkanlıkları  (kopyala-yapıştır-test et) yönündedir. URL de unutulan tokenlar güvenlik için tehlikeli olabilir.</p></li>
</ul>


<p>Kullanıcı doğrulama ile ilgili daha önce yazdığım <a href="http://muhammetdilek.dudupress.com/articles/ruby-on-rails-rest-api-de-http-basic-authentication-kullanarak-kullanici-dogrulama">Ruby On Rails REST API' de HTTP Basic Authentication Kullanarak Kullanıcı Doğrulama
</a> yazısını okuyabilirsiniz.</p>

<!-- more -->


<p><code>API</code>' de güvenliği sağlamanın diğer bir yolu ise <code>API</code>' yi kullanacak client' lara bir <code>API_KEY</code> verip o <code>API_KEY</code> ile authenticate yapmak. Bu yöntemi kullanırsak <code>API_KEY</code> leri saklamak için bir modele ihtiyacımız olacak.
Bu modelde;</p>

<ul>
<li><code>user_id</code></li>
<li><code>access_token</code></li>
<li><code>expires_at</code>
alanlarını tutacağız. Eğer <code>API_KEY</code> ömrünü kısıtlamak istemiyorsanız <code>expires_at</code> alanına ihtiyacınız yok.</li>
</ul>


<p>Ben burada örneği kısa tutmak için <code>user_id</code> ve <code>expires_at</code> alanlarını kullanmayacağım.</p>

<p>```bash
Muhammets-iMac:pigon muhammetdilek$ rails g model api_key access_token:string</p>

<pre><code>  invoke  active_record
  create    db/migrate/20121006130334_create_api_keys.rb
  create    app/models/api_key.rb
  invoke    test_unit
  create      test/unit/api_key_test.rb
  create      test/fixtures/api_keys.yml
</code></pre>

<p>```</p>

<p>```ruby
class ApiKey &lt; ActiveRecord::Base
  before_create :generate_access_token</p>

<p>  private</p>

<p>  def generate_access_token</p>

<pre><code>begin
  self.access_token = SecureRandom.hex
end while self.class.exists?(access_token: access_token)
</code></pre>

<p>  end
end
```</p>

<p>Burada <code>access_token</code> üretmek için <code>ruby 1.9</code>' la gelen <code>SecureRandom.hex</code> metodunu kullanarak 16 haneden oluşan <code>string</code> bir <code>access_token</code> oluşturuyoruz. Eğer oluşturulan bu <code>access_token</code> daha önceden oluşturulmuş ise kod daha önceden oluşturulmayan bir <code>access_token</code> üretinceye kadar tekrar çalışıyor.</p>

<p>Şimdi bir ApiKey oluşturup devam edelim.</p>

<p><code>bash
Muhammets-iMac:pigon muhammetdilek$ rails c
Loading development environment (Rails 3.2.8)
1.9.3p194 :001 &gt; ApiKey.create
   (0.0ms)  begin transaction
  ApiKey Exists (0.1ms)  SELECT 1 AS one FROM "api_keys" WHERE "api_keys"."access_token" = '765582c8bf829e682abe70618957a42a' LIMIT 1
Binary data inserted for `string` type on column `access_token`
  SQL (35.5ms)  INSERT INTO "api_keys" ("access_token", "created_at", "updated_at") VALUES (?, ?, ?)  [["access_token", "765582c8bf829e682abe70618957a42a"], ["created_at", Sat, 06 Oct 2012 13:11:59 UTC +00:00], ["updated_at", Sat, 06 Oct 2012 13:11:59 UTC +00:00]]
   (2.0ms)  commit transaction
 =&gt; #&lt;ApiKey id: 1, access_token: "765582c8bf829e682abe70618957a42a", created_at: "2012-10-06 13:11:59", updated_at: "2012-10-06 13:11:59"&gt;
1.9.3p194 :002 &gt;
</code></p>

<p><code>Controller</code>' a <code>access_token</code> kontrolü yapan bir metod yazacağız;</p>

<p>```ruby
module Api
  module V2</p>

<pre><code>class ProductsController &lt; ApplicationController
  include ActionController::MimeResponds
  include ActionController::HttpAuthentication::Basic::ControllerMethods
  #http_basic_authenticate_with name: 'admin', password: 'secret'
  before_filter :restrict_access

  respond_to :json, :xml

  #Actions

  private

  def restrict_access
    api_key = ApiKey.find_by_access_token(params[:access_token])
    head :unauthorized unless api_key
  end
end
</code></pre>

<p>  end
end
```</p>

<p><code>http://pigon.dev/api/products</code> adresini açtığımızda bize hiçbir datanın dönmediğini görüyoruz. Birde query olarak <code>access_token</code> ekleyerek bakalım;
<img src="https://dl.dropbox.com/u/44821222/access-token.png" alt="API_KEY" />
Evet gördüğünüz gibi urlden <code>acces_token</code> alarak datalara erişim kısıtlaması getirebiliyoruz. <code>access_token</code>' bilgilisini <code>URL</code>' den almak yerine <code>HTTP Header</code> dan alalım.</p>

<p><code>Rails</code>' te <code>HTTP header</code>' dan <code>access_token</code> almak için <code>authenticate_or_request_with_http_token</code> metodunu kullancağız.</p>

<p>```ruby
def restrict_access
  #api_key = ApiKey.find_by_access_token(params[:access_token])
  #head :unauthorized unless api_key
  authenticate_or_request_with_http_token do |token, options|</p>

<pre><code>ApiKey.exists?(access_token: token)
</code></pre>

<p>  end
end
```</p>

<p>Eğer <a href="https://github.com/rails-api/rails-api"><code>Rails::API</code></a> gem' ini kullanıyorsak <code>ActionController::HttpAuthentication::Token::ControllerMethods</code> modülünü <code>Controller</code>' a eklememiz gerekiyor.</p>

<p><code>bash
Muhammets-iMac:pigon muhammetdilek$ curl http://pigon.dev/api/products -H 'Authorization: Token token="xyz"'
HTTP Token: Access denied.
Muhammets-iMac:pigon muhammetdilek$
</code></p>

<p><code>bash
Muhammets-iMac:pigon muhammetdilek$ curl http://pigon.dev/api/products -H 'Authorization: Token token="765582c8bf829e682abe70618957a42a"'
[{"amount":"4.3","created_at":"2012-10-06T09:58:47Z","id":2,"title":"Product2","updated_at":"2012-10-06T09:58:47Z"},{"amount":"15.0","created_at":"2012-10-06T09:59:14Z","id":3,"title":"Product3Update","updated_at":"2012-10-06T09:59:24Z"}]Muhammets-iMac:pigon muhammetdilek$
</code>
Komut satırından baktığımızda kodlarımızın çalıştığını görüyoruz.</p>

<p>İyi çalışmalar.</p>

<p>Kaynak: <a href="http://railscasts.com/episodes/352-securing-an-api">RailsCasts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby On Rails ile Rails::API Gem'ini Kullanarak API Geliştirme]]></title>
    <link href="http://lab2023.github.com/blog/2012/11/24/ruby-on-rails-ile-rails-api-gem-ini-kullanarak-api-gelistirme/"/>
    <updated>2012-11-24T17:25:00+02:00</updated>
    <id>http://lab2023.github.com/blog/2012/11/24/ruby-on-rails-ile-rails-api-gem-ini-kullanarak-api-gelistirme</id>
    <content type="html"><![CDATA[<p>Daha önce API geliştirme ile ilgili <a href="http://www.gelistiricigunlugu.com/ruby-on-rails-te-api-yazalim/">Ruby On Rails’ te API Yazalım</a> başlıklı bir yazı yazmıştım. Bu yazımda ise <code>Rails::API</code> gem' ini kullanarak <code>API</code> geliştirmeyi anlatacağım.</p>

<p><code>Rails::API</code> bir <code>API</code> için gerekli olan kütüphaneler dışındaki kütüphaneleri çıkararak(view, assests ...), normal bir rails projesine göre daha hafif bir proje oluşturabilmemizi sağlayan gem.</p>

<p>Aşağıdaki komutu çalıştırarak gem' i yükleyelim</p>

<p><code>gem install rails-api</code></p>

<!-- more -->


<p>Yeni proje oluşturmak için aşağıdaki komutu kullanacağız.</p>

<p><code>rails-api new pigon</code></p>

<p>Komutu çalışıtrdıktan sonra projenin dosyalarına baktığımızda <code>app</code> dizininin çok sade olduğunu görüyoruz. API geliştirme ihtiyacı dışındaki şeyler(views, helpers, assets) atılmıştır. <code>ApplicationController</code>' a baktığımızda <code>ActionController::Base</code> yerine daha hafif olan <code>ActionController::API</code>' den türetildiğini görüyoruz.</p>

<p><code>ruby
class ApplicationController &lt; ActionController::API
end
</code></p>

<p>En büyük değişiklik ise <code>Gemfile</code> dosyamızda. <code>rails-api</code> gem' ini buraya eklenmiş olarak görüyoruz fakat <code>assets</code> grubundaki gem' lerin ve <code>jquery-rails</code> gem' inin eklenmediğini görüyoruz.</p>

<p>```ruby
source 'https://rubygems.org'</p>

<p>gem 'rails', '3.2.8'</p>

<h1>Bundle edge Rails instead:</h1>

<h1>gem 'rails', :git => 'git://github.com/rails/rails.git'</h1>

<p>gem 'rails-api'</p>

<p>gem 'sqlite3'
```</p>

<p>Peki generator' larda nasıl bir değişiklik oluyor?. <code>scaffold</code> ile <code>Product</code> modeli oluşturduğumuzda <code>assets</code>, <code>views</code> ve <code>helpers</code> dosyalarının oluşturulmadığını görüyoruz.</p>

<p>```bash
Muhammets-iMac:pigon muhammetdilek$ rails g scaffold Product title:string price:decimal</p>

<pre><code>  invoke  active_record
  create    db/migrate/20121003130313_create_products.rb
  create    app/models/product.rb
  invoke    test_unit
  create      test/unit/product_test.rb
  create      test/fixtures/products.yml
  invoke  api_resource_route
   route    resources :products, except: :edit
  invoke  scaffold_controller
  create    app/controllers/products_controller.rb
  invoke    test_unit
  create      test/functional/products_controller_test.rb
</code></pre>

<p>```</p>

<p>Gördüğünüz gibi <code>model</code>, <code>controller</code> ve <code>test</code> dosyalarından oluşan bir yapı oluşturuldu. Şimdi migration' ı çalıştıralım.</p>

<p><code>bash
Muhammets-iMac:pigon muhammetdilek$ rake db:migrate
</code></p>

<p><code>scaffold</code> tarafından generate edilen <code>ProductsController</code>' ına baktığımızda sadece <code>JSON</code>formatında veri döndürüldüğünü göreceksiniz.</p>

<p>```ruby
class ProductsController &lt; ApplicationController
  # GET /products
  # GET /products.json
  def index</p>

<pre><code>@products = Product.all

render json: @products
</code></pre>

<p>  end</p>

<p>  # GET /products/1
  # GET /products/1.json
  def show</p>

<pre><code>@product = Product.find(params[:id])

render json: @product
</code></pre>

<p>  end</p>

<p>  # GET /products/new
  # GET /products/new.json
  def new</p>

<pre><code>@product = Product.new

render json: @product
</code></pre>

<p>  end</p>

<p>  # POST /products
  # POST /products.json
  def create</p>

<pre><code>@product = Product.new(params[:product])

if @product.save
  render json: @product, status: :created, location: @product
else
  render json: @product.errors, status: :unprocessable_entity
end
</code></pre>

<p>  end</p>

<p>  # PATCH/PUT /products/1
  # PATCH/PUT /products/1.json
  def update</p>

<pre><code>@product = Product.find(params[:id])

if @product.update_attributes(params[:product])
  head :no_content
else
  render json: @product.errors, status: :unprocessable_entity
end
</code></pre>

<p>  end</p>

<p>  # DELETE /products/1
  # DELETE /products/1.json
  def destroy</p>

<pre><code>@product = Product.find(params[:id])
@product.destroy

head :no_content
</code></pre>

<p>  end
end
```</p>

<p>Uygulamamızın hiç <code>HTML</code> view renderlemediğini sadece <code>JSON</code> renderlediğini görüyoruz. Tarayıcımızda <code>/products</code> yolunu ziyaret ettiğimizde <code>JSON</code> formatında henüz ürün eklemediğimiz için boş bir <code>array</code> renderlediğini göreceğiz.</p>

<p><code>curl</code> ile uygulamamıza product ekleyelim.</p>

<p><code>bash
Muhammets-iMac:pigon muhammetdilek$ curl -d "product[title]=Product1&amp;product[price]=3.3" http://pigon.dev/products
{"created_at":"2012-10-03T13:27:10Z","id":3,"price":"3.3","title":"Product1","updated_at":"2012-10-03T13:27:10Z"}
</code></p>

<p><code>/products</code> adresini ziyeret ettiğimizde</p>

<p>```json
[</p>

<pre><code>{
    created_at: "2012-10-03T13:28:27Z",
    id: 1,
    price: "3.3",
    title: "Product1",
    updated_at: "2012-10-03T13:28:27Z"
}
</code></pre>

<p>]
```</p>

<p><code>JSON</code> formatında eklediğimiz ürünü görüyoruz.</p>

<p>Şimdide uygulamamıza <code>XML</code> desteği ekleyelim.</p>

<p>Burada <code>respond_to</code> metodunu kullanacağız.</p>

<p>```ruby
  def index</p>

<pre><code>@products = Product.all

respond_to do |format|
  format.json { render json: @products }
  format.xml { render xml: @products }
end
</code></pre>

<p>  end
```</p>

<p><code>/products.xml</code> sayfasını ziyaret ettiğimizde aşağıdaki hatayı alacağız.</p>

<p>```bash
NoMethodError in ProductsController#index</p>

<p>undefined method `respond_to' for #&lt;ProductsController:0x007fbc096e1438>
```</p>

<p><code>Rails::API</code> de uygulamayı daha hafif hale getirmek için bir dizi özellik çıkarılmış durumda ama biz istersek bu özellikleri kolayca uygulamalarımza geri ekleyebiliriz. Yukarıdaki aldığımız hata da <code>ActionController::MimeResponds</code> modülü etkin olmadığından kaynaklanıyor. <code>ProductController</code>' a <code>ActionController::MimeResponds</code> modülünü ekleyelim.</p>

<p><code>ruby
class ProductsController &lt; ApplicationController
  include ActionController::MimeResponds
  #Actions
end
</code></p>

<p><img src="https://dl.dropbox.com/u/44821222/xml-response.png" alt="xml response" /></p>

<p><code>Rails::API</code> README dosyasında ihtiyacımız çerçevesinde hangi <a href="https://github.com/spastorino/rails-api/blob/master/README.md">modulleri</a> kullanabilecegimiz listelenmiştir. Ancak bu liste modüllerin tam listesi değil. <code>Rails</code> <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/base.rb#L201">kodları</a> ile <code>Rails::API</code>nin <a href="https://github.com/spastorino/rails-api/blob/master/lib/rails-api/action_controller/api.rb#L124">kodlarını</a> karşılaştırdığımızda bu listedeki eksik olanları görebiliyoruz.</p>

<p>Bazı modülleri kullanmak istediğimizde  modülü sadece controller' da çağırmak yetmeyebibilir. <code>Rails::API</code> <code>Controller</code>' ları azalttığı gibi aynı zamanda <code>Rack middleware</code> katmanınıda azaltmıştır. Normal bir rails uygulamasındaki middleware' lar ile <code>Rails::API</code> gem' ini kullanarak olulturduğumuz bir uygulamadaki middleware' ları karşılaştırırsak aşağıdaki middleware' ların çıkarılmış olduğunu görüyoruz.</p>

<p><code>bash
use Rack::MethodOverride
use ActionDispatch::Cookies
use ActionDispatch::Session::CookieStore
use ActionDispatch::Flash
use ActionDispatch::BestStandardsSupport
</code></p>

<p>İhtiyacımız çerçevesinde bu middleware' ları <code>application.rb</code> ye ekleyerek kullanabiliriz.</p>

<p><code>Rails::API</code> kullanırken karşılaşılan sorunların birçoğu issuelarda çözülmüş. https://github.com/rails-api/rails-api/issues?page=1&amp;state=closed   Gözatmakta fayda var.</p>

<p>İyi çalışmalar...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby On Rails REST API'de HTTP Basic Authentication Kullanarak Kullanıcı Doğrulama]]></title>
    <link href="http://lab2023.github.com/blog/2012/10/06/ruby-on-rails-rest-apide-http-basic-authentication-kullanarak-kullanici-dogrulama/"/>
    <updated>2012-10-06T13:09:00+03:00</updated>
    <id>http://lab2023.github.com/blog/2012/10/06/ruby-on-rails-rest-apide-http-basic-authentication-kullanarak-kullanici-dogrulama</id>
    <content type="html"><![CDATA[<p>Temel http kullanıcı doğrulama yöntemi. <code>Rails</code>' te kullanımı inanılmaz derecede kolay ve çoğu API istemcilerinde hiçbir sorun olmadan çalışabiliyor.</p>

<p>Controller' da <code>http_basic_authentication_with</code> metodunu çağırıp parametre olarak <code>user_name</code> ve <code>password</code> geçiyoruz.</p>

<p><code>ruby
http_basic_authenticate_with name: 'admin', password: 'secret'
</code></p>

<p>Şimdi uygulamamıza <code>curl</code> ile istek yapalım.</p>

<!-- more -->


<p><code>bash
$ curl http://pigon.dev/api/products
HTTP Basic: Access denied.
</code></p>

<p><code>bash
$ curl -I http://pigon.dev/api/products
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Basic realm="Application"
Content-Type: text/html; charset=utf-8
Cache-Control: no-cache
X-Request-Id: c371c847fb00f9eda805d2ea2c583178
X-Runtime: 0.001656
Connection: close
</code></p>

<p><code>bash
$ curl http://pigon.dev/api/products -u 'admin:secret'
[{"amount":"4.3","created_at":"2012-10-06T09:58:47Z","id":2,"title":"Product2","updated_at":"2012-10-06T09:58:47Z"},{"amount":"15.0","created_at":"2012-10-06T09:59:14Z","id":3,"title":"Product3Update","updated_at":"2012-10-06T09:59:24Z"}]
</code></p>

<p>İyi çalışmalar dilerim...</p>

<p>Kaynak: <a href="http://railscasts.com/episodes/352-securing-an-api">RailsCasts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API nedir ?]]></title>
    <link href="http://lab2023.github.com/blog/2012/10/05/api-nedir/"/>
    <updated>2012-10-05T14:57:00+03:00</updated>
    <id>http://lab2023.github.com/blog/2012/10/05/api-nedir</id>
    <content type="html"><![CDATA[<p><code>Application Programming Interface</code> kelimelerinin kısaltılmış halidir. <code>Application Programming Interface</code>' i açıklayacak olursak; Uygulama Geliştirme Arayüzü demektir. Buradaki <code>Arayüz</code> olarak çevirdiğimiz <code>Interface</code> kavramı kafamızı karıştırmasın. <code>Interface</code> Object-oriented programlamada kullanıdığımız <code>Interface Class</code>' ının tanımıyla aynıdır. <code>Interface Class</code>' lar kendini kullanacak alt <code>class</code> lara ; <em><strong>"Eğer sen beni kullanacaksan benim bazı metodlarım var. Sende onları kendi içinde tanımlayacaksın ve argumanları şu şu olacak</strong>"</em> diyerek kendi belirledikleri kuralları zorunlu hale getirirler. <code>API</code> kelimesinde geçen <code>Interface</code> kelimeside buradaki ile aynı anlamı taşımaktadırlar. Konuyu daha iyi anlamak için <code>Interface Class</code> larını incelemnizde fayda var diye düşünüyorum.</p>

<p><code>Interface</code> kavramına fazla takılmadan konumuza devam edelim.</p>

<!-- more -->


<p><code>API</code>' yi <em><strong>"Geliştirilen bir uygulamanın kodları açılmamak şartıyla başka programcılar tarafından kendi uygulamalarında kullanılabilmesine olanak sağlayan teknoloji"</strong></em> olarak tanımlayabiliriz. Burada altını çizmek istediğim noktalar var.</p>

<ul>
<li><p><code>kodları açılmamak şartıyla</code>; evet arkadaşlar başka bir geliştiricinin yazdığı uygulamanın kodlarını görmeden o uygulamayı kendi uygulamanızda kullanabiliyorsak bize bu imkanı sağlayan teknoloji <code>API</code>' dir.</p></li>
<li><p>Bir diğer nokta ise <code>farklı programcılar</code>; aslında burada <code>farklı platformlar</code> desek daha uygun olacak. <code>API</code> sini kullandığımız uygulamanın hangi platformda yazıldığı bizi hiç ilgilendirmiyor. Biz sadece o uygulamanın <code>API</code> sinin bize sunduğu şeylerle ilgileniyoruz.</p></li>
</ul>


<p>Basit bir örnek verecek olursak;</p>

<p>Nüfus ve Vatandaşlık İşleri Genel Müdürlüğünün tc kimlik no doğrulama <a href="https://tckimlik.nvi.gov.tr/Service/KPSPublic.asmx?op=TCKimlikNoDogrula">servisi</a> var. Ben bir programcı olarak bunu <code>ruby</code> ile geliştirdiğim bir uygulamamda uygulamama üye olan kullanıcıların gerçek olup olmadığını kontrol etmek için kullanmak istiyorum. Servisin <a href="https://tckimlik.nvi.gov.tr/Service/KPSPublic.asmx?op=TCKimlikNoDogrula">döküman sayfasına</a> gidip nasıl kullanılacağına bakıyorum. Sonrada bunu <code>ruby</code>' de nasıl kullanabilirm diye araştırıp, öğrenip uygulamama entegre ediyorum. İşte bu kadar :)</p>

<p>Günümüzde popüler birçok uygulamanın <code>API</code>' ye sahip olduklarını görüyoruz. <a href="https://dev.twitter.com/">Twitter</a>,  <a href="http://developer.github.com/">Github</a>, <a href="https://developers.facebook.com/">Facebook</a>... Daha iyi anlamak için bu <code>API</code>leri inceleyebilirsiniz.</p>

<p>İyi çalışmalar</p>
]]></content>
  </entry>
  
</feed>
