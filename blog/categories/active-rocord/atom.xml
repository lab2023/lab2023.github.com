<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: active-rocord | lab2023 - internet teknolojileri]]></title>
  <link href="http://lab2023.github.com/blog/categories/active-rocord/atom.xml" rel="self"/>
  <link href="http://lab2023.github.com/"/>
  <updated>2013-02-24T13:26:13+02:00</updated>
  <id>http://lab2023.github.com/</id>
  <author>
    <name><![CDATA[lab2023]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby On Rails Active Record'ta toplu kayıt güncelleme işlemi - update_all]]></title>
    <link href="http://lab2023.github.com/blog/2012/10/12/ruby-on-rails-active-recordta-toplu-kayit-guncelleme-islemi-update-all/"/>
    <updated>2012-10-12T14:24:00+03:00</updated>
    <id>http://lab2023.github.com/blog/2012/10/12/ruby-on-rails-active-recordta-toplu-kayit-guncelleme-islemi-update-all</id>
    <content type="html"><![CDATA[<p><code>update_all</code> metodu ile toplu kayıt güncelleyebiliriz.</p>

<p><code>ruby
update_all(updates, conditions = nil, options = {}) # public
</code>
Aldığı parametreler;</p>

<ul>
<li><code>updates</code> : Güncellenecek alan(lar)  <code>string</code>, <code>array</code> veya <code>hash</code> alabilir. SQL deki <code>SET</code> alanı.</li>
<li><code>conditions</code> : Koşul(lar) <code>string</code>, <code>array</code> veya <code>hash</code> alabilir. SQL deki <code>WHERE</code> alanı.</li>
<li><code>options</code> : Ek seçenekler için. <code>LIMIT</code>, <code>ORDER</code> gibi gibi.</li>
</ul>


<!-- more -->


<p>Aşağıda örnekleri inceledeğimizde daha iyi anlaşılacaktır.</p>

<ul>
<li>Müşteri tablosundaki tüm kayıtların <code>wants_email</code> alanınını <code>true</code> yapalım.</li>
</ul>


<p><code>ruby
Customer.update_all :wants_email =&gt; true
</code></p>

<ul>
<li>Başlığında(<code>title</code>) <code>Rails</code> geçen kitapların yazarını(<code>author</code>) <code>David</code> yapalım</li>
</ul>


<p><code>ruby
Book.update_all "author = 'David'", "title LIKE '%Rails%'"
</code></p>

<ul>
<li>Son 1 haftadır <code>migrate</code> edilen Avatarların <code>migrated_at</code> alanını güncelleyelim.</li>
</ul>


<p><code>ruby
Avatar.update_all ['migrated_at = ?', Time.now.utc], ['migrated_at &gt; ?', 1.week.ago]
</code></p>

<ul>
<li>Başlığında(<code>title</code>) <code>Rails</code> geçen ve <code>created_at</code> alanına göre sıraladığımızda gelen 5 kitabın yazarını(<code>author</code>) <code>David</code> yapalım.</li>
</ul>


<p><code>ruby
Book.update_all "author = 'David'", "title LIKE '%Rails%'", :order =&gt; 'created_at', :limit =&gt; 5
</code></p>

<p>Yukarıdaki örneklerde <code>conditions</code> (koşulları) <code>update_all</code> metoduna parametre olarak geçtik. Bunları <code>update_all</code> metoduna parametre geçmek yerine dışarıdada kullanabiliriz.</p>

<p>```ruby
Book.where('title LIKE ?', '%Rails%').update_all(:author => 'David')</p>

<p>Book.where('title LIKE ?', '%Rails%').order(:created_at).limit(5).update_all(:author => 'David')
```</p>

<p>İyi çalışmalar dilerim.</p>
]]></content>
  </entry>
  
</feed>
